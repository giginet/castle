# peco
function exists { which $1 &> /dev/null }

if exists peco; then
  # ignore duplicates from history
  function peco-select-history() {
    local tac
    if which tac > /dev/null; then
      tac="tac"
    else
      tac="tail -r"
    fi
    BUFFER=$(history -n 1 | eval $tac | awk '!a[$0]++' | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
  }
  zle -N peco-select-history
  bindkey '^r' peco-select-history

  function peco-autojump() {
    cd $(j -s | awk '{ print $2 }' | awk '/^\//' | peco)
  }
  zle -N peco-autojump
  bindkey '^@' peco-autojump

  pecorake() { local task=$(rake -W | peco | cut -d " " -f 2); rake $task }

  alias prake='pecorake'

  function venv() {
    venvs=`pyenv versions | peco`
    venv0=`echo $venvs | cut -d' ' -f1`
    venv1=`echo $venvs | cut -d' ' -f2`
    if [[ $venv0 == "*" ]]; then
      venv_name=$venv1
    else
      venv_name=`echo $venvs| awk '{ print $1 }'`
    fi

    mode=local
    if [[ $1 == "--global" ]]; then
      mode=global
    fi
    echo "Set ${mode} Python version to ${venv_name}"
    pyenv $mode $venv_name
  }

  function ppgrep() {
    if [[ $1 == "" ]]; then
    PECO=peco
    else
    PECO="peco --query $1"
    fi
    ps aux | eval $PECO | awk '{ print $2 }'
  }

  function ppkill() {
    if [[ $1 =~ "^-" ]]; then
      QUERY=""            # options only
    else
      QUERY=$1            # with a query
      [[ $# > 0 ]] && shift
    fi
    ppgrep $QUERY | xargs kill $*
  }

  function pghq () {
    local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
    echo $selected_dir
    cd $selected_dir
  }

  function pco {
    git checkout `git branch | peco | sed -e "s/\* //g" | awk "{print \$1}"`
  }

  function pag () {
    vim $(ag $@ | peco --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
  }

fi
